"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[299],{3905:(e,a,t)=>{t.d(a,{Zo:()=>d,kt:()=>k});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=n.createContext({}),p=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},d=function(e){var a=p(e.components);return n.createElement(s.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(t),k=r,f=c["".concat(s,".").concat(k)]||c[k]||u[k]||o;return t?n.createElement(f,l(l({ref:a},d),{},{components:t})):n.createElement(f,l({ref:a},d))}));function k(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=c;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=t[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5847:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=t(7462),r=(t(7294),t(3905));const o={sidebar_position:0},l="Setup",i={unversionedId:"guides/setup",id:"guides/setup",title:"Setup",description:".NET Core 2.1 and later using Hosted Service",source:"@site/docs/guides/setup.md",sourceDirName:"guides",slug:"/guides/setup",permalink:"/docs/guides/setup",draft:!1,editUrl:"https://github.com/farfetch/kafkaflow/tree/master/website/docs/guides/setup.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Guides",permalink:"/docs/category/guides"},next:{title:"Admin",permalink:"/docs/guides/admin"}},s={},p=[{value:".NET Core 2.1 and later using Hosted Service",id:"net-core-21-and-later-using-hosted-service",level:2},{value:"Using Startup class",id:"using-startup-class",level:2},{value:"Unity or other DI containers",id:"unity-or-other-di-containers",level:2}],d={toc:p};function u(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"setup"},"Setup"),(0,r.kt)("h2",{id:"net-core-21-and-later-using-hosted-service"},".NET Core 2.1 and later using Hosted Service"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Required Packages")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow/"},"KafkaFlow")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow.Extensions.Hosting/"},"KafkaFlow.Extensions.Hosting")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow.Microsoft.DependencyInjection/"},"KafkaFlow.Microsoft.DependencyInjection")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow.LogHandler.Console/"},"KafkaFlow.LogHandler.Console"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Optional Packages")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow.Serializer/"},"KafkaFlow.Serializer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow.Serializer.NewtonsoftJson/"},"KafkaFlow.Serializer.NewtonsoftJson")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow.TypedHandler/"},"KafkaFlow.TypedHandler"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public static void Main(string[] args)\n{\n    Host\n        .CreateDefaultBuilder(args)\n        .ConfigureServices((hostContext, services) =>\n        {\n            services.AddKafkaFlowHostedService(kafka => kafka\n                .UseConsoleLog()\n                .AddCluster(cluster => cluster\n                    .WithBrokers(new[] { "localhost:9092" })\n                    .AddConsumer(consumer => consumer\n                        .Topic("sample-topic")\n                        .WithGroupId("sample-group")\n                        .WithBufferSize(100)\n                        .WithWorkersCount(10)\n                        .AddMiddlewares(middlewares => middlewares\n                            .AddSerializer<NewtonsoftJsonMessageSerializer>()\n                            .AddTypedHandlers(handlers => handlers\n                                .AddHandler<SampleMessageHandler>())\n                        )\n                    )\n                    .AddProducer("producer-name", producer => producer\n                        .DefaultTopic("sample-topic")\n                        .AddMiddlewares(middlewares => middlewares\n                            .AddSerializer<NewtonsoftJsonMessageSerializer>()\n                        )\n                    )\n                )\n            );\n        })\n        .Build()\n        .Run();\n}\n')),(0,r.kt)("h2",{id:"using-startup-class"},"Using Startup class"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Required Packages")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow/"},"KafkaFlow")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow.Microsoft.DependencyInjection/"},"KafkaFlow.Microsoft.DependencyInjection")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow.LogHandler.Console/"},"KafkaFlow.LogHandler.Console"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Optional Packages")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow.Serializer/"},"KafkaFlow.Serializer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow.Serializer.NewtonsoftJson/"},"KafkaFlow.Serializer.NewtonsoftJson")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow.TypedHandler/"},"KafkaFlow.TypedHandler"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public void ConfigureServices(IServiceCollection services)\n{\n    services.AddKafka(kafka => kafka\n        .UseConsoleLog()\n        .AddCluster(cluster => cluster\n            .WithBrokers(new[] { "localhost:9092" })\n            .AddConsumer(consumer => consumer\n                .Topic("sample-topic")\n                .WithGroupId("sample-group")\n                .WithBufferSize(100)\n                .WithWorkersCount(10)\n                .AddMiddlewares(middlewares => middlewares\n                    .AddSerializer<NewtonsoftJsonMessageSerializer>()\n                    .AddTypedHandlers(handlers => handlers\n                        .AddHandler<SampleMessageHandler>())\n                )\n            )\n            .AddProducer("producer-name", producer => producer\n                .DefaultTopic("sample-topic")\n                .AddMiddlewares(middlewares => middlewares\n                    .AddSerializer<NewtonsoftJsonMessageSerializer>()\n                )\n            )\n        )\n    );\n}\n\npublic void Configure(\n    IApplicationBuilder app,\n    IWebHostEnvironment env,\n    IHostApplicationLifetime lifetime)\n{\n    var kafkaBus = app.ApplicationServices.CreateKafkaBus();\n\n    lifetime.ApplicationStarted.Register(() => kafkaBus.StartAsync(lifetime.ApplicationStopped));\n}\n')),(0,r.kt)("h2",{id:"unity-or-other-di-containers"},"Unity or other DI containers"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Required Packages")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow/"},"KafkaFlow")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow.Unity/"},"KafkaFlow.Unity")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow.LogHandler.Console/"},"KafkaFlow.LogHandler.Console"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Optional Packages")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow.Serializer/"},"KafkaFlow.Serializer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow.Serializer.NewtonsoftJson/"},"KafkaFlow.Serializer.NewtonsoftJson")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow.TypedHandler/"},"KafkaFlow.TypedHandler"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var configurator = new KafkaFlowConfigurator(\n    new UnityDependencyConfigurator(unityContainer),\n    kafka => kafka\n        .UseConsoleLog()\n        .AddCluster(cluster => cluster\n            .WithBrokers(new[] { "localhost:9092" })\n            .AddConsumer(consumer => consumer\n                .Topic("sample-topic")\n                .WithGroupId("sample-group")\n                .WithBufferSize(100)\n                .WithWorkersCount(10)\n                .AddMiddlewares(middlewares => middlewares\n                    .AddSerializer<NewtonsoftJsonMessageSerializer>()\n                    .AddTypedHandlers(handlers => handlers\n                        .AddHandler<SampleMessageHandler>())\n                )\n            )\n            .AddProducer("producer-name", producer => producer\n                .DefaultTopic("sample-topic")\n                .AddMiddlewares(middlewares => middlewares\n                    .AddSerializer<NewtonsoftJsonMessageSerializer>()\n                )\n            )\n        )\n);\n\nvar bus = configurator.CreateBus(new UnityDependencyResolver(unityContainer));\n\n// Call when your app starts\nawait bus.StartAsync();\n\n// Call when your app stops\nawait bus.StopAsync();\n')))}u.isMDXComponent=!0}}]);