"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/kafkaflow/docs/","docId":"introduction"},{"type":"category","label":"Getting Started","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Installation","href":"/kafkaflow/docs/getting-started/installation","docId":"getting-started/installation"},{"type":"link","label":"Quickstart","href":"/kafkaflow/docs/getting-started/create-your-first-application","docId":"getting-started/create-your-first-application"},{"type":"link","label":"Packages","href":"/kafkaflow/docs/getting-started/packages","docId":"getting-started/packages"}],"href":"/kafkaflow/docs/category/getting-started"},{"type":"category","label":"Guides","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Setup","href":"/kafkaflow/docs/guides/setup","docId":"guides/setup"},{"type":"link","label":"Admin","href":"/kafkaflow/docs/guides/admin","docId":"guides/admin"},{"type":"link","label":"Authentication","href":"/kafkaflow/docs/guides/authentication","docId":"guides/authentication"},{"type":"link","label":"Compressor","href":"/kafkaflow/docs/guides/compressor","docId":"guides/compressor"},{"type":"link","label":"Consumers","href":"/kafkaflow/docs/guides/consumers","docId":"guides/consumers"},{"type":"link","label":"Dashboard","href":"/kafkaflow/docs/guides/dashboard","docId":"guides/dashboard"},{"type":"link","label":"Dependency Injection","href":"/kafkaflow/docs/guides/dependency-injection","docId":"guides/dependency-injection"},{"type":"link","label":"Log Handler","href":"/kafkaflow/docs/guides/log-handler","docId":"guides/log-handler"},{"type":"link","label":"Middlewares","href":"/kafkaflow/docs/guides/middlewares","docId":"guides/middlewares"},{"type":"link","label":"Producers","href":"/kafkaflow/docs/guides/producers","docId":"guides/producers"},{"type":"link","label":"Serializer Middleware","href":"/kafkaflow/docs/guides/serializer-middleware","docId":"guides/serializer-middleware"},{"type":"link","label":"Typed Handler Middleware","href":"/kafkaflow/docs/guides/typed-handler-middleware","docId":"guides/typed-handler-middleware"}],"href":"/kafkaflow/docs/category/guides"}]},"docs":{"getting-started/create-your-first-application":{"id":"getting-started/create-your-first-application","title":"Quickstart: Create your first application with KafkaFlow","description":"In this article, you use C# and the .NET CLI to create two applications that will produce and consume events from Apache Kafka.","sidebar":"tutorialSidebar"},"getting-started/installation":{"id":"getting-started/installation","title":"Installation","description":"KafkaFlow is a set of nuget packages.","sidebar":"tutorialSidebar"},"getting-started/packages":{"id":"getting-started/packages","title":"Packages","description":"Core","sidebar":"tutorialSidebar"},"guides/admin":{"id":"guides/admin","title":"Admin","description":"KafkaFlow provides a Web API where you can get details about the KafkaFlow consumers and perform several administration operations over them. This can be manually (for example, you can install and use Swagger) or by any other applications using the available endpoints.","sidebar":"tutorialSidebar"},"guides/authentication":{"id":"guides/authentication","title":"Authentication","description":"To produce and consume messages to/from authenticated brokers you have to configure the cluster with security information in the application setup.","sidebar":"tutorialSidebar"},"guides/compressor":{"id":"guides/compressor","title":"Compressor","description":"Native Compressor","sidebar":"tutorialSidebar"},"guides/consumers":{"id":"guides/consumers","title":"Consumers","description":"Here is where KafkaFlow shines. Using KafkaFlow you have full control over how to consume the messages. Every consumer has its own Workers and Middlewares configuration. You can have multiple consumers consuming the same topic with different consumer groups or one consumer with multiple topics.","sidebar":"tutorialSidebar"},"guides/dashboard":{"id":"guides/dashboard","title":"Dashboard","description":"KafkaFlow provides a Dashboard where you can visualize information related to your consumers and make use of all operations available on KafkaFlow.Admin.WebApi.","sidebar":"tutorialSidebar"},"guides/dependency-injection":{"id":"guides/dependency-injection","title":"Dependency Injection","description":"KafkaFlow can support any DI framework. We natively support Microsoft DI and Unity 5.","sidebar":"tutorialSidebar"},"guides/log-handler":{"id":"guides/log-handler","title":"Log Handler","description":"The framework has the ILogHandler interface that can be implemented to log the framework\'s messages. The log handler can be configured in the setup process using the method UseLogHandler:","sidebar":"tutorialSidebar"},"guides/middlewares":{"id":"guides/middlewares","title":"Middlewares","description":"KafkaFlow is very middleware-oriented. Messages will be delivered to a middleware, will then be passed to another middleware, and so on. The middlewares can transform the messages, allowing them to apply serialization and compression, for example. You can log the messages, handle exceptions, apply retry policies (maybe using Polly), collect metrics, and many other things. The middlewares are executed in the same order that they are defined in the configuration. Every product/consumer has its own middlewares instances, so, the instances are not shared between different consumers/producers, but when consuming, the instances are shared between the workers of the same consumer. The middlewares are instantiated by the configured dependency injection container, so every dependency configured by your container can be delivered in the middleware constructor.","sidebar":"tutorialSidebar"},"guides/producers":{"id":"guides/producers","title":"Producers","description":"To produce messages using KafkaFlow you have to configure the producers in the application setup. The producers also support Middlewares. You have two ways to configure the producers: name-based producer and type-based producer. I highly recommend the read of Confluent Producer documentation for better practices when producing messages.","sidebar":"tutorialSidebar"},"guides/serializer-middleware":{"id":"guides/serializer-middleware","title":"Serializer Middleware","description":"It\'s a middleware used to serialize and deserialize messages. Install the KafkaFlow.Serializer package and add the AddSerializer extension method to your producer/consumer middlewares to use it. The method can receive two classes as generic arguments. The first one must implement the IMessageSerializer interface. The second one is optional and must implement the IMessageTypeResolver interface, if the parameter is not passed then the DefaultTypeResolver will be used. Both classes can be passed as a normal argument through a factory method too. For topics that have just one message type use the AddSingleTypeSerializer method.","sidebar":"tutorialSidebar"},"guides/setup":{"id":"guides/setup","title":"Setup","description":".NET Core 2.1 and later using Hosted Service","sidebar":"tutorialSidebar"},"guides/typed-handler-middleware":{"id":"guides/typed-handler-middleware","title":"Typed Handler Middleware","description":"It\'s a middleware that calls different classes (the handlers) depending on the message type. It should be used when the topic has different messages types. When a message with a specific type arrives, the middleware will call the appropriate message handler for that message type. A message handler can be created by implementing the IMessageHandler interface. The handler\'s instance is created by the configured dependency injection container, any handler dependency will be injected through the constructor and the instance lifetime can be configured in the setup process. If there is no handler defined for the arriving message, it will be ignored.","sidebar":"tutorialSidebar"},"introduction":{"id":"introduction","title":"Introduction to KafkaFlow","description":"KafkaFlow is a .NET framework to create Kafka-based applications, simple to use and extend.","sidebar":"tutorialSidebar"}}}')}}]);